------------------------------------------------
Typical example for initialConditions input file
------------------------------------------------

<?xml version = "1.0" encoding = "UTF-8" standalone = "yes"?>
<CI>
  <!-- LIST OF GEOMETRICAL DOMAINS  -->
  <physicalDomains>
    <domain name="base" state="leftChamber" type="entireDomain"/>
  </physicalDomains>

  <!-- LIST OF BOUNDARY CONDITIONS -->
  <boundaryConditions>
    <boundCond name="BC_Xmin" type="nonReflecting" number="1"/>
    <boundCond name="BC_Xmax" type="nonReflecting" number="2"/>
  </boundaryConditions>

  <!--  LIST OF STATES  -->
  <state name="leftChamber">
    <material type="fluid" EOS="IG_air.xml">
      <dataFluid alpha="0.5" density="1.0"/>
    </material>
    <material type="fluid" EOS="SG_water.xml">
      <dataFluid alpha="0.5" density="1000.0"/>
    </material>
    <mixture>
      <dataMix pressure = "1.e5"/>
      <velocity x="0." y="0." z="0."/>
    </mixture>
    <transport name="color" value="32."/>
  </state>
</CI>

-------------------------------------
REQUIRED initial condition parameters
-------------------------------------

1) Physical domain
******************
Contains one or more <domain> nodes. Each node contains a domain geometrical properties as well as a material state name (defined below).
%%%%%%%%%%%%%%%%%% << copy between these lines
<physicalDomains>
  <domain name="base" state="leftChamber" type="entireDomain"/>
  <domain name="HP"  state="rightChamber" type="rectangle">
    <!-- <dataHalfSpace axis="x" origin="0.5" direction="positive"/> -->
    <dataRectangle axis1="x" axis2="y" lAxis1="0.3" lAxis2="0.2">
      <posInferiorVertex x="0.2" y="0." z="0."/>
    </dataRectangle>
  </domain>
</physicalDomains>
%%%%%%%%%%%%%%%%%% << copy between these lines
Available geometrical domains are: entireDomain, halfSpace, disc, rectangle, ellipse, cuboid, sphere, ellipsoid, cylinder.
<!-- type=halfSpace -->
<dataHalfSpace axis="x" origin="0.5" direction="positive"/>
<!-- type=disc -->
<dataDisc axis1="x" axis2="y" radius="0.5">
  <center x="0." y="0." z="0."/>
</dataDisc>
<!-- type=rectangle -->
<dataRectangle axis1="x" axis2="y" lAxis1="0.3" lAxis2="0.2">
  <posInferiorVertex x="0.4" y="0.5" z="0."/>
</dataRectangle>
<!-- type=ellipse -->
<dataEllipse axis1="x" axis2="y" radius1="1." radius2="1.5">
  <center x="0." y="0." z="0."/>
</dataEllipse>
<!-- type=cuboid -->
<dataCuboid lAxisX="1." lAxisY="1." lAxisZ="0.5">
  <posInferiorVertex x="1." y="0.5" z="0.5"/>
</dataCuboid>
<!-- type=sphere -->
<dataSphere radius="0.5">
  <center x="1." y="0.5" z="0.5"/>
</dataSphere>
<!-- type=ellipsoid -->
<dataEllipsoid axis1="x" axis2="y" axis3="z" radius1="1." radius2="1.5" radius3="1.5">
  <center x="0." y="0." z="0."/>
</dataEllipsoid>
<!-- type=cylinder -->
<dataCylinder axis1="x" axis2="y" radius="0.5" length="1.">
  <center x="0." y="0." z="0."/>
</dataCylinder>
******************
Additional feature for geometrical domain: It is possible to use physicalIdentity number coming from mesh software to initialize a geometrical domain.
Example:
<domain name="base" state="leftChamber" type="entireDomain" physicalEntity="10"/>
In this example the entire computation domain will be initialize accordingly to the physicalEntity 10.

Immersed boundaries:
********************
Immersed boundaries can also be set by using `physicalEntity="-1"`. These domains are then filled by non deformable solids and treated as walls.
Example:
<domain name="HP"  state="rightChamber" type="rectangle" physicalEntity="-1">
  <dataRectangle axis1="x" axis2="y" lAxis1="0.3" lAxis2="0.2">
    <posInferiorVertex x="0.2" y="0." z="0."/>
  </dataRectangle>
</domain>

2) Boundary conditions
**********************
Contains the list of needed boundary conditions.
%%%%%%%%%%%%%%%%%% << copy between these lines
<boundaryConditions>
  <boundCond name="around" type="wall" number="1" />
</boundaryConditions>
%%%%%%%%%%%%%%%%%% << copy between these lines
Default value of BC are non-reflecting.
a) For a Cartesian mesh, boundary conditions order are imposed (the `name` and `number` fields are not used by ECOGEN and can be used by the user to store any relevant information):
1. boundary condition on minimal X side (named `BC_Xmin` in ECOGEN examples)
2. boundary condition on maximal X side (BC_Xmax` in ECOGEN examples)
3. boundary condition on minimal Y side (BC_Ymin` in ECOGEN examples)
4. boundary condition on maximal Y side (BC_Ymax` in ECOGEN examples)
5. boundary condition on minimal Z side (BC_Zmin` in ECOGEN examples)
6. boundary condition on maximal Z side (BC_Zmax` in ECOGEN examples)
b) For unStrucutred meshes, the `number` field is important and should be in agreement with physical conditions determined in the mesh file comming from GMSH (while the `name` field is unused).

Available boundary conditions are: nonReflecting, wall, symmetry, inletTank, inletInjStagState, inletInjTemp, outletPressure, outletMassflow, nullFlux. Some of them needs to refer to a material state.
<!-- nonReflecting -->
<boundCond name="outlet" type="nonReflecting" number="1" />
<!-- symmetry -->
<boundCond name="symmetry" type="symmetry" number="2" />
<!-- wall -->
<boundCond name="wall" type="wall" number="3" />
<!-- inletTank -->
<boundCond name="inlet" type="inletTank" number="3">
  <dataInletTank p0="4.e6" T0="93.3"/>
  <fluidsProp>
    <dataFluid EOS="IG_oxyVap.xml" alpha="0.0001"/>
    <dataFluid EOS="SG_oxyLiq.xml" alpha="0.9999"/>
  </fluidsProp>
</boundCond>
<!-- inletInjStagState -->
<boundCond name="inlet" type="inletInjStagState" number="1">
    <dataInletInj m0="2.413092"/>
    <dataFluid EOS="IG_air.xml" density="4.04e-3" pressure="2.57404e2" alpha="0.1"/>
    <dataFluid EOS="SG_water.xml" density="1000." pressure="2.57404e2" alpha="0.9"/>
</boundCond>
<!-- inletInjTemp -->
<boundCond name="inlet" type="inletInjTemp" number="1">
    <dataInletInj m0="6500."/>
    <dataFluid EOS="SG_water.xml" temperature="300." alpha="0.9999"/>
    <dataFluid EOS="IG_air.xml" temperature="300." alpha="0.0001"/>
</boundCond>
<!-- outletPressure -->
<boundCond name="outlet" type="outletPressure" number="5">
  <dataOutletPressure p0="1.e5">
    <transport name="color" value="1.e-6"/>
  </dataOutletPressure>
</boundCond>
<!-- outletMassflow -->
<boundCond name="outlet" type="outletMassflow" number="4">
    <dataOutletMassflow m0="50."/>
</boundCond>
<!-- nullFlux -->
<boundCond name="wall" type="nullFlux" number="1"/> <!-- Useful for 1D geometry with smooth varying cross-section (see geometry option of model.xml)-->
******************
One could use wall boundary condition with specific heat boundary condition such as imposed temperature, imposed flux or adiabatic (default). This option requires the conductivity additionnal physics (defined in model.xml).
Example:
<boundCond name="BC_Xmax" type="wall" number="2">
  <dataWall>
    <dataWallHeatTransfer heatCondition="temperature" temperature="250."/>
  </dataWall>
</boundCond>
For Moving Reference Frame computation with viscous additionnal physics it is possible to set a specific wall rotational velocity.
The wall velocity is defined in the rotating frame. In case the wall is static in the absolute frame, the wall rotational velocity in the reference frame should be the opposite of the one given in the MRF source term.
Be aware that this option requires the MRF source term and the viscosity additionnal physics (see model.xml) with Green-Gauss gradient method (see main.xml).
Example:
<boundCond name="carter" type="wall" number="2">
  <dataWall>
    <dataWallMRF omegaX="0." omegaY="0." omegaZ="-100."/>
  </dataWall>
</boundCond>

3) Materials states list
************************
The list of materials states used in domains and boundCond must be precised. Each state contains as much as needed materials and transports defined in the "model.xml" input file.
%%%%%%%%%%%%%%%%%% << copy between these lines
<state name="leftChamber">
  <material type="fluid" EOS="IG_air.xml">
    <dataFluid alpha="0.5" density="1.0"/>
  </material>
  <material type="fluid" EOS="SG_water.xml">
    <dataFluid alpha="0.5" density="1000.0"/>
  </material>
  <mixture>
    <dataMix pressure = "1.e5"/>
    <velocity x="0." y="0." z="0."/>
  </mixture>
</state>
%%%%%%%%%%%%%%%%%% << copy between these lines
Fluids and materials node structures depend on the flow model defined in the "model.xml" input file.
a) For pressure-velocity-equilibrium multiphase model (Kapila)
--------------------------------------------------------------
Volume fractions, densities (or temperatures), pressure and velocity components. Caution, pressure and velocity data are linked to the mixture.
%%%%%%%%%%%%%%%%%% << copy between these lines
<material type="fluid" EOS="IG_air.xml">
  <dataFluid alpha="0.5" density="1.0"/>
</material>
<material type="fluid" EOS="SG_water.xml">
  <dataFluid alpha="0.5" density="1000.0"/>
</material>
<mixture>
  <dataMix pressure = "1.e5"/>
  <velocity x="0." y="0." z="0."/>
</mixture>
%%%%%%%%%%%%%%%%%% << copy between these lines
b) For velocity-equilibrium multiphase model (either with internal- or total-energy formulation)
------------------------------------------------------------------------------------------------
Volume fractions, densities (or temperatures), pressure and velocity components. Caution, velocity data are linked to the mixture.
%%%%%%%%%%%%%%%%%% << copy between these lines
<material type="fluid" EOS="IG_air.xml">
  <dataFluid alpha="0.5" density="1.0" pressure = "1.e5"/>
</material>
<material type="fluid" EOS="SG_water.xml">
  <dataFluid alpha="0.5" density="1000.0" pressure = "1.e5"/>
</material>
<mixture>
  <velocity x="0." y="0." z="0."/>
</mixture>
%%%%%%%%%%%%%%%%%% << copy between these lines
c) For single-phase model of Euler
----------------------------------
Density or temperature, pressure and velocity components.
%%%%%%%%%%%%%%%%%% << copy between these lines
<material type="fluid" EOS="IG_air.xml">
  <dataFluid density="10.0" pressure="1.e5">
    <velocity x="1000." y="1000." z="0."/>
  </dataFluid>
</material>
%%%%%%%%%%%%%%%%%% << copy between these lines
d) For temperature-pressure-velocity-equilibrium multiphase model
-----------------------------------------------------------------
Volume fractions, temperature, pressure and velocity components. Caution, pressure, temperature and velocity data are linked to the mixture.
%%%%%%%%%%%%%%%%%% << copy between these lines
<material type="fluid" EOS="IG_waterVap.xml">
  <dataFluid alpha="0.2"/>
</material>
<material type="fluid" EOS="SG_waterLiq.xml">
  <dataFluid alpha="0.8"/>
</material>
<mixture>
  <dataMix pressure = "1.e5" temperature ="300."/>
  <velocity x="0." y="0." z="0."/>
</mixture>
%%%%%%%%%%%%%%%%%% << copy between these lines
e) For homogeneous Euler equations
----------------------------------
Volume fractions, pressure and velocity components. Caution, pressure and velocity data are linked to the mixture.
%%%%%%%%%%%%%%%%%% << copy between these lines
<material type="fluid" EOS="SG_waterLiq.xml">
  <dataFluid alpha="0.99"/>
</material>
<material type="fluid" EOS="IG_waterVap.xml">
  <dataFluid alpha="0.01"/>
</material>
<mixture>
  <dataMix pressure = "1.e6"/>
  <velocity x="0." y="0." z="0."/>
</mixture>
%%%%%%%%%%%%%%%%%% << copy between these lines
f) For velocity-equilibrium multiphase model
--------------------------------------------
Volume fractions, densities (or temperatures), pressure and velocity components. Caution, velocity data are linked to the mixture.
%%%%%%%%%%%%%%%%%% << copy between these lines
<material type="fluid" EOS="IG_air.xml">
  <dataFluid alpha="0.5" density="1.0" pressure = "1.e5"/>
</material>
<material type="fluid" EOS="SG_water.xml">
  <dataFluid alpha="0.5" density="1000.0" pressure = "1.e5"/>
</material>
<mixture>
  <velocity x="0." y="0." z="0."/>
</mixture>
%%%%%%%%%%%%%%%%%% << copy between these lines
